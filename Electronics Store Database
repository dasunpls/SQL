CREATE TABLE items (id INT, item_name TEXT, item_price DOUBLE);

INSERT INTO items VALUES (1, "Meta Quest 2", 299.00);
INSERT INTO items VALUES (2, "Nintendo Switch", 299.49);
INSERT INTO items VALUES (3, "Beats Studio Buds", 149.95);
INSERT INTO items VALUES (4, "Apple TV", 149.99);
INSERT INTO items VALUES (5, "Fire HD Tablet 10", 19.99);
INSERT INTO items VALUES (6, "Bose Home Speaker", 149.99);
INSERT INTO items VALUES (7, "Portable WiFi Projector", 62.99);
INSERT INTO items VALUES (8, "Apple AirPods", 169.00);
INSERT INTO items VALUES (9, "JBL FLIP 5", 99.95);
INSERT INTO items VALUES (10, "Echo Dot", 59.99);

CREATE TABLE item_stock (item_id INT, item_quantity INT);

INSERT INTO item_stock VALUES (1, 7);
INSERT INTO item_stock VALUES (2, 14);
INSERT INTO item_stock VALUES (3, 37);
INSERT INTO item_stock VALUES (4, 10);
INSERT INTO item_stock VALUES (5, 12);
INSERT INTO item_stock VALUES (6, 30);
INSERT INTO item_stock VALUES (7, 12);
INSERT INTO item_stock VALUES (8, 12);
INSERT INTO item_stock VALUES (9, 25);
INSERT INTO item_stock VALUES (10, 22);

# What items are sold?
SELECT * FROM items;

# How many items are currently in stock?
SELECT SUM(item_quantity) AS total_items FROM item_stock;

# What is the MOST expensive item?
SELECT item_name, item_price FROM items WHERE item_price = (select MAX(item_price) FROM items);

# What is the LEAST expensive item? 
SELECT item_name, item_price FROM items WHERE item_price = (select MIN(item_price) FROM items);

# Updating an incorrect table value.
UPDATE items SET item_price = 199.99 WHERE id = 5;

# List items in DESCENDING order by amount in stock.
SELECT item_name, item_quantity FROM items JOIN item_stock ON items.id = item_stock.item_id ORDER BY item_quantity DESC;

# List items with more than 20 units in stock.
SELECT item_name, item_quantity FROM items JOIN item_stock ON items.id = item_stock.item_id WHERE item_quantity > 20 ORDER BY item_quantity DESC;
